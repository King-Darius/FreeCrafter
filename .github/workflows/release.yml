name: Build and Release (All OS)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.os != 'windows-latest' }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python requirements
        run: python -m pip install --upgrade pip -r scripts/requirements.txt

      - name: Install Linux build deps
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake ninja-build \
            libgl1-mesa-dev libx11-xcb-dev libxrender-dev libxi-dev \
            libxkbcommon-dev libxkbcommon-x11-0 '^libxcb.*-dev'

      - name: Install NSIS (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install nsis -y
          $nsisPath = 'C:\Program Files (x86)\NSIS'
          "PATH=$env:PATH;$nsisPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "CMAKE_NSIS_EXECUTABLE=$nsisPath\makensis.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Configure project
        shell: bash
        run: |
          set -euxo pipefail
          python scripts/bootstrap.py --ci
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_NSIS_EXECUTABLE="$CMAKE_NSIS_EXECUTABLE"
          fi

      - name: Build project
        run: cmake --build build --config Release

      - name: Install to staging
        run: cmake --install build --config Release --prefix dist

      - name: Run tests (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        env:
          QT_QPA_PLATFORM: offscreen
        run: |
          set -euxo pipefail
          pushd build
          ctest --output-on-failure
          popd

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $env:QT_QPA_PLATFORM = "windows"
          $env:QT_OPENGL = "angle"
          Push-Location build
          try {
            ctest --output-on-failure -C Release
          } finally {
            Pop-Location
          }

      - name: Package with CPack
        shell: bash
        run: |
          set -euxo pipefail
          pushd build
          case "${{ matrix.os }}" in
            ubuntu-latest)
              cpack -G TGZ
              ;;
            macos-latest)
              cpack -G DragNDrop
              ;;
            windows-latest)
              cpack -G NSIS
              ;;
          esac
          popd

      - name: Collect release artifacts
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p release_out
          found_cpack_exe=0

          collect_artifacts() {
            local source_dir="$1"
            if [ -d "$source_dir" ]; then
              while IFS= read -r -d '' file; do
                cp "$file" release_out/
                if [[ "$file" == *.exe ]]; then
                  found_cpack_exe=1
                fi
              done < <(find "$source_dir" -type f \( -name '*.exe' -o -name '*.dmg' -o -name '*.tar.gz' \) -print0)
            fi
          }

          collect_artifacts build
          collect_artifacts build/_CPack_Packages

          if [ "${{ matrix.os }}" = "windows-latest" ] && [ "$found_cpack_exe" -eq 0 ]; then
            python scripts/package_gui_bootstrap.py
            for file in dist/*.exe; do
              [ -e "$file" ] || continue
              cp "$file" release_out/
            done
            shopt -s nullglob
            exe_candidates=(release_out/*.exe)
            shopt -u nullglob
            if [ ${#exe_candidates[@]} -eq 0 ]; then
              echo "::error ::No Windows installer executable produced after fallback packaging."
              exit 1
            fi
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            shopt -s nullglob
            exe_candidates=(release_out/*.exe)
            shopt -u nullglob
            if [ ${#exe_candidates[@]} -eq 0 ]; then
              echo "::error ::No Windows installer executable produced by CPack."
              exit 1
            fi
          fi

          ls -R release_out

      - uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: release_out
          if-no-files-found: error

      - name: Publish release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: release_out/*
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true
